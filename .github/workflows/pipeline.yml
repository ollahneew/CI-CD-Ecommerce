# The name of the workflow.
name: Build and Deploy

# Run the workflow when code is pushed to the main branch
on:
  push:
    branches:
      - main

# Set environment variables
env:
  PORT: ${{ secrets.PORT }}
  MONGO_DB: ${{ secrets.MONGO_DB }}
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  MAIL_ACCOUNT: ${{ secrets.MAIL_ACCOUNT }}

# This is the workflow that is being run.
jobs:
  # Job 1: build v√† test
  build-and-test:
    # This is telling GitHub to run the workflow on the latest version of Ubuntu.
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from the GitHub repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Login to Docker Hub using credentials from repository secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Install dependencies, export environment variables to be used by application and run tests for the server application
      - name: Install and Test Server
        working-directory: ./backend-ecomerce
        run: |
          npm install
          export MONGO_DB=${{ secrets.MONGO_DB }}
          export PORT=${{ secrets.PORT }}
          export ACCESS_TOKEN=${{ secrets.ACCESS_TOKEN }}
          export REFRESH_TOKEN=${{ secrets.REFRESH_TOKEN }}
          export CLIENT_ID=${{ secrets.CLIENT_ID }}
          export MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          export MAIL_ACCOUNT=${{ secrets.MAIL_ACCOUNT }}
          npm run test

      
      # Install dependencies and run tests for the client application
      - name: Install and Test Client
        working-directory: ./Ecommerce
        run: |
          npm install
          npm run test

      # Build a Docker image for the client application
      - name: Build Client Docker Image
        working-directory: ./Ecommerce
        # Build image with tag ollah/ecomerce:client
        run: |
          docker build -t ollah/ecomerce:client-${{github.run_number}} .

      # Build a Docker image for the server application
      - name: Build Server Docker Image
        working-directory:
          ./backend-ecomerce
          # Build image with tag ollah/ecomerce:server
        run: |
          docker build -t ollah/ecomerce:server-${{github.run_number}} .



      # Push the Docker images to Docker Hub
      - name: Push Docker Images to Docker Hub
        run: |
          docker push ollah/ecomerce:client-${{github.run_number}}
          docker push ollah/ecomerce:server-${{github.run_number}}
   # Job 2: Deploy
  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
      steps:
      - name: Deploy to server
       # Use "appleboy/ssh-action" to deploy the image to the server via SSH
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Pull the image that was pushed to DockerHub above
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ecomerce:client-${{github.run_number}}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ecomerce:server-${{github.run_number}}

            # Stop and remove the current container (if any)
            docker stop ecomerce-client
            docker rm ecomerce-client
            docker stop ecomerce-server
            docker rm ecomerce-server

            # Run a new container with the image pulled above
            docker run -d -p 3000:3000 --name ecomerce-client ${{ secrets.DOCKERHUB_USERNAME }}/ecomerce:client-${{github.run_number}}
            docker run -d -p 3001:3001 --name ecomerce-server ${{ secrets.DOCKERHUB_USERNAME }}/ecomerce:server-${{github.run_number}}